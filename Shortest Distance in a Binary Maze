class Solution {
  public:
    int shortestPath(vector<vector<int>> &grid, pair<int, int> source,
                     pair<int, int> destination) {  int m = grid.size();
        int n = grid[0].size();
        queue<pair<int, pair<int,int>>> q;
        q.push({0, source});
        
        while(q.size()){
            
            if(destination==q.front().second){
                return q.front().first;
            }
            
            int i = q.front().second.first;
            int j = q.front().second.second;
            int count = q.front().first;
            q.pop();
            
            if(i+1<m && grid[i+1][j]!=0){
                q.push({count+1,{i+1,j}});
                grid[i+1][j]=0;
            }
            
            if(j+1<n && grid[i][j+1]!=0){
                q.push({count+1,{i,j+1}});
                grid[i][j+1]=0;
            }
            
            if(i-1>=0 && grid[i-1][j]!=0){
                q.push({count+1,{i-1,j}});
                grid[i-1][j]=0;
            }
            
            if(j-1>=0 && grid[i][j-1]!=0){
                q.push({count+1,{i,j-1}});
                grid[i][j-1]=0;
            }
        }
        return -1;
        // Thanks to Bhalerao-2002
    }
};
