class Solution {
  public:
    int minimumCost(vector<vector<int>>& flights, int n, int k) {  vector<pair<int,int>>adj[n+1];
        for(int i=0;i<flights.size();i++){
            int u=flights[i][0];
            int v=flights[i][1];
            int wt=flights[i][2];
            adj[u].push_back({v,wt});
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        
        vector<int>dist(n+1,1e9);
        dist[k]=0;
        pq.push({0,k});
        
        while(!pq.empty()){
            int weight=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            for(auto it:adj[node]){
                int adjweight=it.second;
                int adjnode=it.first;
                if(dist[adjnode]>weight+adjweight){
                    dist[adjnode]=weight+adjweight;
                    pq.push({dist[adjnode],adjnode});
                }
            }
        }
        sort(dist.begin(),dist.end());
        for(int i=0;i<dist.size()-1;i++){
            if(dist[i]==1e9) return -1;
        }
        return dist[n-1];
        // Thanks to Bhalerao-2002
    }
};
